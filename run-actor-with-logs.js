const axios = require('axios');

async function runActorWithLogs() {
    try {
        console.log('üöÄ Ch·∫°y actor v·ªõi logs chi ti·∫øt...');

        const actorId = '68a534b2ab88595f6f4007b5';
        const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODkxYTVjNjAxMjI5ZWY4ODc3Zjc0ZjEiLCJpYXQiOjE3NTUxNTYxNDQsImV4cCI6MTc1NTc2MDk0NH0.tJNQ3GW6lLxJIyANvj6oDbBBYBg0l3CgI4BsKo317DA';

        const inputData = {
            url: 'https://example.com',
            maxRequests: 10,
            debug: true
        };

        console.log('üìã Input data:', inputData);
        console.log('‚è∞ Th·ªùi gian b·∫Øt ƒë·∫ßu:', new Date().toISOString());

        // Ch·∫°y actor
        const response = await axios.post(
            `http://localhost:5000/api/actors/${actorId}/run`,
            {
                input: inputData
            },
            {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            }
        );

        console.log('‚úÖ Actor started successfully!');
        console.log('üìä Response:', JSON.stringify(response.data, null, 2));

        const runId = response.data.data.runId;
        console.log('üÜî Run ID:', runId);

        // Theo d√µi logs trong 10 gi√¢y
        console.log('\nüìã Theo d√µi logs trong 10 gi√¢y...');

        for (let i = 1; i <= 10; i++) {
            await new Promise(resolve => setTimeout(resolve, 1000));

            try {
                const statusResponse = await axios.get(
                    `http://localhost:5000/api/actors/${actorId}`,
                    {
                        headers: {
                            'Authorization': `Bearer ${token}`
                        }
                    }
                );

                const actor = statusResponse.data.data;
                console.log(`\n‚è±Ô∏è  ${i}s - Tr·∫°ng th√°i actor:`);
                console.log(`   üìä Status: ${actor.status}`);
                console.log(`   üîÑ Run Status: ${actor.runInfo?.runStatus}`);
                console.log(`   üìà Run Count: ${actor.runInfo?.runCount}`);
                console.log(`   üìù Run Log: ${actor.runInfo?.runLog || 'N/A'}`);
                console.log(`   üìä Metrics:`, {
                    totalDataProcessed: actor.metrics?.totalDataProcessed || 0,
                    lastPerformanceUpdate: actor.metrics?.lastPerformanceUpdate
                });

                // N·∫øu actor ƒë√£ ho√†n th√†nh
                if (actor.runInfo?.runStatus === 'completed') {
                    console.log('\nüéâ Actor ƒë√£ ho√†n th√†nh!');
                    break;
                }

            } catch (error) {
                console.log(`‚ùå L·ªói khi ki·ªÉm tra tr·∫°ng th√°i (${i}s):`, error.response?.data || error.message);
            }
        }

        // Ki·ªÉm tra k·∫øt qu·∫£ cu·ªëi c√πng
        console.log('\nüìã K·∫øt qu·∫£ cu·ªëi c√πng:');
        const finalResponse = await axios.get(
            `http://localhost:5000/api/actors/${actorId}`,
            {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            }
        );

        const finalActor = finalResponse.data.data;
        console.log('üìä Tr·∫°ng th√°i cu·ªëi:', {
            id: finalActor._id,
            name: finalActor.name,
            status: finalActor.status,
            buildStatus: finalActor.buildInfo?.buildStatus,
            runStatus: finalActor.runInfo?.runStatus,
            runCount: finalActor.runInfo?.runCount,
            runLog: finalActor.runInfo?.runLog,
            metrics: finalActor.metrics
        });

        return response.data;
    } catch (error) {
        console.error('‚ùå Error running actor:');
        if (error.response) {
            console.error('Status:', error.response.status);
            console.error('Data:', error.response.data);
        } else {
            console.error('Error:', error.message);
        }
        throw error;
    }
}

async function getActorLogs() {
    try {
        console.log('\nüìã L·∫•y logs chi ti·∫øt c·ªßa actor...');

        const actorId = '68a534b2ab88595f6f4007b5';
        const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODkxYTVjNjAxMjI5ZWY4ODc3Zjc0ZjEiLCJpYXQiOjE3NTUxNTYxNDQsImV4cCI6MTc1NTc2MDk0NH0.tJNQ3GW6lLxJIyANvj6oDbBBYBg0l3CgI4BsKo317DA';

        const response = await axios.get(
            `http://localhost:5000/api/actors/${actorId}/logs`,
            {
                headers: {
                    'Authorization': `Bearer ${token}`
                }
            }
        );

        console.log('üìã Actor logs:', JSON.stringify(response.data, null, 2));
        return response.data;
    } catch (error) {
        console.log('‚ö†Ô∏è  Kh√¥ng th·ªÉ l·∫•y logs (c√≥ th·ªÉ endpoint ch∆∞a t·ªìn t·∫°i):', error.response?.data || error.message);
    }
}

async function main() {
    try {
        console.log('üé¨ B·∫Øt ƒë·∫ßu ch·∫°y actor v·ªõi logs chi ti·∫øt...\n');

        // Ch·∫°y actor v√† theo d√µi logs
        await runActorWithLogs();

        // Th·ª≠ l·∫•y logs chi ti·∫øt
        await getActorLogs();

        console.log('\n‚úÖ Ho√†n th√†nh!');

    } catch (error) {
        console.error('üí• Main error:', error.message);
    }
}

main();
