const axios = require('axios');

const BASE_URL = 'http://localhost:5000/api';
const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODkxYTVjNjAxMjI5ZWY4ODc3Zjc0ZjEiLCJpYXQiOjE3NTQ1NTExMzYsImV4cCI6MTc1NTE1NTkzNn0.LzSyVhsJq2omFqgT-kqZbX8pJSV7yRz9SVMQ64ljs4o';

const headers = {
    'Authorization': `Bearer ${token}`,
    'Content-Type': 'application/json'
};

async function testCrawlDataSystem() {
    try {
        console.log('üß™ Testing Crawl Data System...\n');

        // 1. Ch·∫°y campaign ƒë·ªÉ t·∫°o d·ªØ li·ªáu
        console.log('1Ô∏è‚É£ Ch·∫°y campaign ƒë·ªÉ t·∫°o d·ªØ li·ªáu...');
        const campaignId = '6894658410595b979c150037';

        const runResponse = await axios.post(`${BASE_URL}/campaigns/${campaignId}/run`, {}, { headers });
        console.log('‚úÖ Campaign ƒë√£ ƒë∆∞·ª£c ch·∫°y:', runResponse.data.message);

        // ƒê·ª£i 10 gi√¢y ƒë·ªÉ campaign ho√†n th√†nh
        console.log('‚è≥ ƒê·ª£i 10 gi√¢y ƒë·ªÉ campaign ho√†n th√†nh...');
        await new Promise(resolve => setTimeout(resolve, 10000));

        // 2. Ki·ªÉm tra tr·∫°ng th√°i campaign
        console.log('\n2Ô∏è‚É£ Ki·ªÉm tra tr·∫°ng th√°i campaign...');
        const statusResponse = await axios.get(`${BASE_URL}/campaigns/${campaignId}/status`, { headers });
        console.log('üìä Tr·∫°ng th√°i campaign:', statusResponse.data.status);
        console.log('üìä Records processed:', statusResponse.data.result.recordsProcessed);
        console.log('üìä Saved data count:', statusResponse.data.result.savedDataCount);

        // 3. L·∫•y d·ªØ li·ªáu crawl theo campaign
        console.log('\n3Ô∏è‚É£ L·∫•y d·ªØ li·ªáu crawl theo campaign...');
        const crawlDataResponse = await axios.get(`${BASE_URL}/crawl-data/campaign/${campaignId}`, { headers });
        console.log('üìä S·ªë l∆∞·ª£ng d·ªØ li·ªáu ƒë√£ l∆∞u:', crawlDataResponse.data.count);

        if (crawlDataResponse.data.data.length > 0) {
            const firstItem = crawlDataResponse.data.data[0];
            console.log('üìä Lo·∫°i d·ªØ li·ªáu:', firstItem.type);
            console.log('üìä Ti√™u ƒë·ªÅ:', firstItem.title);
            console.log('üìä Ngu·ªìn:', firstItem.source);
            console.log('üìä Tr·∫°ng th√°i:', firstItem.status);
        }

        // 4. L·∫•y th·ªëng k√™ d·ªØ li·ªáu
        console.log('\n4Ô∏è‚É£ L·∫•y th·ªëng k√™ d·ªØ li·ªáu...');
        const statsResponse = await axios.get(`${BASE_URL}/crawl-data/stats`, { headers });
        console.log('üìä Th·ªëng k√™ t·ªïng quan:', statsResponse.data.data);

        // 5. L·∫•y d·ªØ li·ªáu theo lo·∫°i
        console.log('\n5Ô∏è‚É£ L·∫•y d·ªØ li·ªáu theo lo·∫°i product...');
        const productDataResponse = await axios.get(`${BASE_URL}/crawl-data/type/product`, { headers });
        console.log('üìä S·ªë s·∫£n ph·∫©m:', productDataResponse.data.count);

        // 6. L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu v·ªõi pagination
        console.log('\n6Ô∏è‚É£ L·∫•y t·∫•t c·∫£ d·ªØ li·ªáu v·ªõi pagination...');
        const allDataResponse = await axios.get(`${BASE_URL}/crawl-data?page=1&limit=5`, { headers });
        console.log('üìä T·ªïng s·ªë d·ªØ li·ªáu:', allDataResponse.data.pagination.total);
        console.log('üìä S·ªë trang:', allDataResponse.data.pagination.pages);
        console.log('üìä D·ªØ li·ªáu trang 1:', allDataResponse.data.data.length);

        // 7. Test c·∫≠p nh·∫≠t tr·∫°ng th√°i (n·∫øu c√≥ d·ªØ li·ªáu)
        if (crawlDataResponse.data.data.length > 0) {
            console.log('\n7Ô∏è‚É£ Test c·∫≠p nh·∫≠t tr·∫°ng th√°i...');
            const firstItemId = crawlDataResponse.data.data[0]._id;

            const updateResponse = await axios.put(`${BASE_URL}/crawl-data/${firstItemId}/status`, {
                status: 'approved',
                notes: 'Test approval'
            }, { headers });

            console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t tr·∫°ng th√°i:', updateResponse.data.message);
        }

        console.log('\nüéâ Test ho√†n th√†nh th√†nh c√¥ng!');

    } catch (error) {
        console.error('‚ùå L·ªói khi test:', error.response ? error.response.data : error.message);
    }
}

testCrawlDataSystem();
