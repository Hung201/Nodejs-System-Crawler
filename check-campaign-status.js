const axios = require('axios');

async function checkAndFixCampaignStatus() {
    try {
        console.log('üîê Step 1: Login...');
        const loginResponse = await axios.post('http://localhost:5000/api/auth/login', {
            email: 'hung@gmail.com',
            password: '123456'
        });
        const token = loginResponse.data.data.token;
        console.log('‚úÖ Login th√†nh c√¥ng!');

        const campaignId = '6894658410595b979c150037';

        console.log('\nüìä Step 2: Ki·ªÉm tra tr·∫°ng th√°i campaign...');
        const statusResponse = await axios.get(`http://localhost:5000/api/campaigns/${campaignId}/status`, {
            headers: { 'Authorization': `Bearer ${token}` }
        });

        const data = statusResponse.data.data;
        console.log('üìã Campaign Status:', data.status);
        console.log('üìä Records Processed:', data.result?.recordsProcessed || 0);
        console.log('‚è±Ô∏è Duration:', data.result?.duration || 0, 'ms');
        console.log('üïê Start Time:', data.result?.startTime);
        console.log('üïê End Time:', data.result?.endTime);
        console.log('‚ùå Error:', data.result?.error);

        // Ki·ªÉm tra n·∫øu campaign ƒëang running qu√° l√¢u
        if (data.status === 'running') {
            const startTime = new Date(data.result?.startTime);
            const now = new Date();
            const durationMs = now - startTime;
            const durationMinutes = Math.floor(durationMs / (1000 * 60));

            console.log(`\n‚ö†Ô∏è Campaign ƒë√£ ch·∫°y ${durationMinutes} ph√∫t`);

            // N·∫øu ch·∫°y qu√° 10 ph√∫t m√† kh√¥ng c√≥ records, coi nh∆∞ failed
            if (durationMinutes > 10 && (!data.result?.recordsProcessed || data.result.recordsProcessed === 0)) {
                console.log('‚ùå Campaign ƒë√£ ch·∫°y qu√° l√¢u kh√¥ng c√≥ k·∫øt qu·∫£, ƒë√°nh d·∫•u l√† failed');

                // C·∫≠p nh·∫≠t campaign status th√†nh failed
                const updateResponse = await axios.put(`http://localhost:5000/api/campaigns/${campaignId}`, {
                    name: data.name,
                    description: data.description,
                    actorId: data.actorId,
                    input: data.input,
                    config: data.config
                }, {
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t campaign status');

                // Ki·ªÉm tra l·∫°i status
                const newStatusResponse = await axios.get(`http://localhost:5000/api/campaigns/${campaignId}/status`, {
                    headers: { 'Authorization': `Bearer ${token}` }
                });

                console.log('üìã New Status:', newStatusResponse.data.data.status);
            }
        }

        // Ki·ªÉm tra n·∫øu c√≥ records nh∆∞ng v·∫´n running
        if (data.status === 'running' && data.result?.recordsProcessed > 0 && data.result?.endTime) {
            console.log('üîÑ Campaign c√≥ data nh∆∞ng v·∫´n running, force complete...');

            // Force complete b·∫±ng c√°ch c·∫≠p nh·∫≠t
            const updateResponse = await axios.put(`http://localhost:5000/api/campaigns/${campaignId}`, {
                name: data.name,
                description: data.description,
                actorId: data.actorId,
                input: data.input,
                config: data.config
            }, {
                headers: {
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                }
            });

            console.log('‚úÖ ƒê√£ force complete campaign');
        }

    } catch (error) {
        console.error('‚ùå Error:', error.response?.data || error.message);
    }
}

console.log('üîç Checking Campaign Status');
console.log('==========================');
checkAndFixCampaignStatus();
