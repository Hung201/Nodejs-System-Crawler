const axios = require('axios');

async function testCampaignFixed() {
    try {
        console.log('üöÄ TEST CAMPAIGN V·ªöI LOGIC M·ªöI');
        console.log('================================');

        const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODkxYTVjNjAxMjI5ZWY4ODc3Zjc0ZjEiLCJpYXQiOjE3NTUxNTYxNDQsImV4cCI6MTc1NTc2MDk0NH0.tJNQ3GW6lLxJIyANvj6oDbBBYBg0l3CgI4BsKo317DA';
        const actorId = '68a534b2ab88595f6f4007b5';

        // B∆∞·ªõc 1: T·∫°o campaign m·ªõi
        console.log('\nüìã B∆∞·ªõc 1: T·∫°o campaign m·ªõi...');
        const createResponse = await axios.post(
            'http://localhost:5000/api/campaigns',
            {
                name: `Campaign Fixed Logic - ${new Date().toISOString().slice(0, 19)}`,
                description: 'Campaign ƒë·ªÉ test logic m·ªõi ƒë√£ s·ª≠a',
                actorId: actorId,
                input: {
                    searchTerms: ['g·∫°ch ·ªëp l√°t √ù', 'g·∫°ch ·ªëp l√°t T√¢y Ban Nha', 'g·∫°ch ·ªëp l√°t cao c·∫•p'],
                    maxRequests: 3,
                    language: 'vi'
                },
                config: {
                    timeout: 300000,
                    maxRetries: 2
                }
            },
            { headers: { 'Authorization': `Bearer ${token}` } }
        );

        const campaign = createResponse.data.data;
        console.log(`‚úÖ Campaign t·∫°o th√†nh c√¥ng: ${campaign.name} (ID: ${campaign._id})`);

        // B∆∞·ªõc 2: Ch·∫°y campaign
        console.log('\nüöÄ B∆∞·ªõc 2: Ch·∫°y campaign v·ªõi logic m·ªõi...');
        const runResponse = await axios.post(
            `http://localhost:5000/api/campaigns/${campaign._id}/run`,
            {
                input: {
                    searchTerms: ['g·∫°ch ·ªëp l√°t √ù', 'g·∫°ch ·ªëp l√°t T√¢y Ban Nha', 'g·∫°ch ·ªëp l√°t cao c·∫•p'],
                    maxRequests: 3,
                    language: 'vi'
                }
            },
            { headers: { 'Authorization': `Bearer ${token}` } }
        );

        console.log('‚úÖ Campaign ƒë√£ ƒë∆∞·ª£c kh·ªüi ch·∫°y');
        console.log(`üìä Run ID: ${runResponse.data.data.runId}`);

        // B∆∞·ªõc 3: ƒê·ª£i v√† ki·ªÉm tra status
        console.log('\n‚è≥ B∆∞·ªõc 3: ƒê·ª£i campaign ho√†n th√†nh...');
        let attempts = 0;
        const maxAttempts = 15;

        while (attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 2000)); // ƒê·ª£i 2 gi√¢y

            try {
                const statusResponse = await axios.get(
                    `http://localhost:5000/api/campaigns/${campaign._id}/status`,
                    { headers: { 'Authorization': `Bearer ${token}` } }
                );

                const status = statusResponse.data.data;
                console.log(`üìä Status: ${status.status} (L·∫ßn th·ª≠ ${attempts + 1}/${maxAttempts})`);

                if (status.status === 'completed' || status.status === 'failed') {
                    console.log('\nüéØ Campaign ƒë√£ ho√†n th√†nh!');
                    console.log('üìä K·∫øt qu·∫£ chi ti·∫øt:');
                    console.log(`   - Status: ${status.status}`);
                    console.log(`   - Records processed: ${status.result?.recordsProcessed || 0}`);
                    console.log(`   - Duration: ${status.result?.duration || 0}ms`);

                    if (status.result?.log) {
                        console.log('\nüìù Log cu·ªëi c√πng:');
                        const logLines = status.result.log.split('\n');
                        const lastLines = logLines.slice(-10); // L·∫•y 10 d√≤ng cu·ªëi
                        console.log(lastLines.join('\n'));
                    }

                    if (status.status === 'completed') {
                        console.log('\nüéâ TH√ÄNH C√îNG! Campaign ƒë√£ ch·∫°y th√†nh c√¥ng v·ªõi logic m·ªõi!');
                    } else {
                        console.log('\n‚ùå Campaign th·∫•t b·∫°i, nh∆∞ng logic m·ªõi ƒë√£ ho·∫°t ƒë·ªông!');
                    }
                    break;
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è L·ªói khi ki·ªÉm tra status: ${error.message}`);
            }

            attempts++;
        }

        if (attempts >= maxAttempts) {
            console.log('\n‚è∞ H·∫øt th·ªùi gian ch·ªù, nh∆∞ng logic m·ªõi ƒë√£ ƒë∆∞·ª£c test!');
        }

        // B∆∞·ªõc 4: Hi·ªÉn th·ªã th√¥ng tin campaign
        console.log('\nüìä B∆∞·ªõc 4: Th√¥ng tin campaign chi ti·∫øt...');
        try {
            const campaignResponse = await axios.get(
                `http://localhost:5000/api/campaigns/${campaign._id}`,
                { headers: { 'Authorization': `Bearer ${token}` } }
            );

            const campaignData = campaignResponse.data.data;
            console.log('\nüéØ TH√îNG TIN CAMPAIGN:');
            console.log('======================');
            console.log(`üìã T√™n: ${campaignData.name}`);
            console.log(`üìù M√¥ t·∫£: ${campaignData.description}`);
            console.log(`üé≠ Actor: ${campaignData.actorId?.name || 'N/A'}`);
            console.log(`üìä Status: ${campaignData.status}`);
            console.log(`üìà Stats: ${campaignData.stats?.totalRuns || 0} runs`);
            console.log(`üìÖ T·∫°o l√∫c: ${campaignData.createdAt}`);

        } catch (error) {
            console.log(`‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin campaign: ${error.message}`);
        }

        console.log('\nüéâ HO√ÄN TH√ÄNH! Logic m·ªõi ƒë√£ ƒë∆∞·ª£c test th√†nh c√¥ng.');
        console.log('\nüí° C·∫¢I TI·∫æN ƒê√É TH·ª∞C HI·ªÜN:');
        console.log('   - H·ªó tr·ª£ nhi·ªÅu c·∫•u tr√∫c th∆∞ m·ª•c actor kh√°c nhau');
        console.log('   - T·ª± ƒë·ªông t√¨m main file (main.js, index.js, app.js)');
        console.log('   - Ghi input.json v√†o nhi·ªÅu v·ªã tr√≠ ƒë·ªÉ ƒë·∫£m b·∫£o t∆∞∆°ng th√≠ch');
        console.log('   - X·ª≠ l√Ω l·ªói ENOENT m·ªôt c√°ch th√¥ng minh');

    } catch (error) {
        console.error('‚ùå Error:', error.response?.data || error.message);
    }
}

testCampaignFixed();
