const portManager = require('../services/portManager');

async function testPortSystem() {
    console.log('üß™ Testing Port Management System');
    console.log('================================\n');

    try {
        // Test 1: L·∫•y th·ªëng k√™ ban ƒë·∫ßu
        console.log('1Ô∏è‚É£ Initial stats:');
        const initialStats = portManager.getStats();
        console.log(initialStats);
        console.log('');

        // Test 2: C·∫•p ph√°t ports cho campaigns
        console.log('2Ô∏è‚É£ Allocating ports for campaigns...');
        const campaignIds = [
            'campaign_001',
            'campaign_002',
            'campaign_003',
            'campaign_004',
            'campaign_005'
        ];

        const allocatedPorts = [];
        for (const campaignId of campaignIds) {
            const port = await portManager.allocatePort(campaignId);
            allocatedPorts.push({ campaignId, port });
            console.log(`   üì° Allocated port ${port} for ${campaignId}`);
        }
        console.log('');

        // Test 3: Ki·ªÉm tra th·ªëng k√™ sau khi c·∫•p ph√°t
        console.log('3Ô∏è‚É£ Stats after allocation:');
        const afterAllocationStats = portManager.getStats();
        console.log(afterAllocationStats);
        console.log('');

        // Test 4: Ki·ªÉm tra campaigns v√† ports
        console.log('4Ô∏è‚É£ Campaigns and ports:');
        const campaigns = portManager.getCampaignPorts();
        console.log(campaigns);
        console.log('');

        // Test 5: L·∫•y port c·ªßa campaign c·ª• th·ªÉ
        console.log('5Ô∏è‚É£ Getting specific campaign port:');
        const testCampaignId = 'campaign_002';
        const specificPort = portManager.getCampaignPort(testCampaignId);
        console.log(`   Port for ${testCampaignId}: ${specificPort}`);
        console.log(`   Is active: ${portManager.isCampaignUsingPort(testCampaignId)}`);
        console.log('');

        // Test 6: Gi·∫£i ph√≥ng m·ªôt s·ªë ports
        console.log('6Ô∏è‚É£ Releasing some ports...');
        const portsToRelease = ['campaign_001', 'campaign_003'];
        for (const campaignId of portsToRelease) {
            const releasedPort = portManager.releasePort(campaignId);
            console.log(`   üì° Released port ${releasedPort} from ${campaignId}`);
        }
        console.log('');

        // Test 7: Ki·ªÉm tra th·ªëng k√™ sau khi gi·∫£i ph√≥ng
        console.log('7Ô∏è‚É£ Stats after release:');
        const afterReleaseStats = portManager.getStats();
        console.log(afterReleaseStats);
        console.log('');

        // Test 8: Th·ª≠ c·∫•p ph√°t l·∫°i port ƒë√£ gi·∫£i ph√≥ng
        console.log('8Ô∏è‚É£ Re-allocating released ports...');
        const newPort1 = await portManager.allocatePort('campaign_001');
        const newPort3 = await portManager.allocatePort('campaign_003');
        console.log(`   üì° Re-allocated port ${newPort1} for campaign_001`);
        console.log(`   üì° Re-allocated port ${newPort3} for campaign_003`);
        console.log('');

        // Test 9: Ki·ªÉm tra port c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng
        console.log('9Ô∏è‚É£ Checking if ports are in use...');
        for (const { campaignId, port } of allocatedPorts) {
            const isInUse = await portManager.isPortInUse(port);
            console.log(`   Port ${port} (${campaignId}): ${isInUse ? 'In Use' : 'Free'}`);
        }
        console.log('');

        // Test 10: Th·ª≠ c·∫•p ph√°t port cho campaign ƒë√£ c√≥ port
        console.log('üîü Testing duplicate allocation...');
        const duplicatePort = await portManager.allocatePort('campaign_002');
        console.log(`   üì° Duplicate allocation for campaign_002: ${duplicatePort}`);
        console.log('');

        // Test 11: Final stats
        console.log('1Ô∏è‚É£1Ô∏è‚É£ Final stats:');
        const finalStats = portManager.getStats();
        console.log(finalStats);
        console.log('');

        console.log('‚úÖ Port management system test completed successfully!');
        console.log('üéØ Key features tested:');
        console.log('   - Port allocation');
        console.log('   - Port release');
        console.log('   - Duplicate handling');
        console.log('   - Stats tracking');
        console.log('   - Port availability checking');

    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
        console.error(error.stack);
    }
}

// Ch·∫°y test
testPortSystem();
