const { exec } = require('child_process');
const util = require('util');
const execAsync = util.promisify(exec);

async function safeCleanup() {
    try {
        console.log('üßπ Safe cleanup - only killing confirmed actor processes...');

        if (process.platform === 'win32') {
            // Windows: Ch·ªâ kill c√°c process c√≥ command line ch·ª©a "actors_storage" ho·∫∑c "main.js"
            const { stdout } = await execAsync('tasklist /FI "IMAGENAME eq node.exe" /FO CSV');
            const lines = stdout.split('\n').slice(1);

            let killedCount = 0;
            for (const line of lines) {
                if (line.trim()) {
                    const parts = line.split(',');
                    const pid = parts[1]?.replace(/"/g, '');

                    if (pid && pid !== process.pid.toString()) {
                        try {
                            // Ki·ªÉm tra command line c·ªßa process
                            const { stdout: wmicOutput } = await execAsync(`wmic process where "ProcessId=${pid}" get CommandLine /format:list`);
                            const commandLine = wmicOutput.split('CommandLine=')[1]?.split('\n')[0] || '';

                            // Ch·ªâ kill n·∫øu l√† actor process th·ª±c s·ª±
                            if (commandLine.includes('actors_storage') ||
                                commandLine.includes('main.js') ||
                                commandLine.includes('node main.js')) {
                                await execAsync(`taskkill /F /PID ${pid}`);
                                console.log(`  ‚úÖ Killed confirmed actor process PID: ${pid}`);
                                console.log(`     Command: ${commandLine.substring(0, 100)}...`);
                                killedCount++;
                            } else {
                                console.log(`  üü¢ Keeping process PID: ${pid} - not an actor`);
                            }
                        } catch (error) {
                            // Process c√≥ th·ªÉ ƒë√£ t·ª± k·∫øt th√∫c ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p
                        }
                    }
                }
            }
            console.log(`\n‚úÖ Killed ${killedCount} confirmed actor processes`);
            console.log('üü¢ Frontend and backend processes preserved');

        } else {
            // Linux/Mac: Ch·ªâ kill c√°c process ch·∫°y main.js trong actors_storage
            await execAsync('pkill -f "node.*actors_storage.*main.js"');
            console.log('‚úÖ Killed actor processes (frontend/backend preserved)');
        }

    } catch (error) {
        console.error('‚ùå Error:', error.message);
    }
}

// Ch·∫°y cleanup
safeCleanup();
