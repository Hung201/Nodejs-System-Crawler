const axios = require('axios');

async function runCampaignSimulation() {
    try {
        console.log('üöÄ CH·∫†Y CAMPAIGN V·ªöI SIMULATION');
        console.log('================================');

        const token = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2ODkxYTVjNjAxMjI5ZWY4ODc3Zjc0ZjEiLCJpYXQiOjE3NTUxNTYxNDQsImV4cCI6MTc1NTc2MDk0NH0.tJNQ3GW6lLxJIyANvj6oDbBBYBg0l3CgI4BsKo317DA';
        const actorId = '68a534b2ab88595f6f4007b5';

        // B∆∞·ªõc 1: T·∫°o campaign m·ªõi
        console.log('\nüìã B∆∞·ªõc 1: T·∫°o campaign m·ªõi...');
        const createResponse = await axios.post(
            'http://localhost:5000/api/campaigns',
            {
                name: `Campaign Simulation - ${new Date().toISOString().slice(0, 19)}`,
                description: 'Campaign ƒë·ªÉ demo simulation v·ªõi input m·ªõi',
                actorId: actorId,
                input: {
                    searchTerms: ['g·∫°ch ·ªëp l√°t √ù', 'g·∫°ch ·ªëp l√°t T√¢y Ban Nha', 'g·∫°ch ·ªëp l√°t cao c·∫•p'],
                    maxRequests: 3,
                    language: 'vi'
                },
                config: {
                    timeout: 300000,
                    maxRetries: 2
                }
            },
            { headers: { 'Authorization': `Bearer ${token}` } }
        );

        const campaign = createResponse.data.data;
        console.log(`‚úÖ Campaign t·∫°o th√†nh c√¥ng: ${campaign.name} (ID: ${campaign._id})`);

        // B∆∞·ªõc 2: Ch·∫°y campaign
        console.log('\nüöÄ B∆∞·ªõc 2: Ch·∫°y campaign...');
        const runResponse = await axios.post(
            `http://localhost:5000/api/campaigns/${campaign._id}/run`,
            {
                input: {
                    searchTerms: ['g·∫°ch ·ªëp l√°t √ù', 'g·∫°ch ·ªëp l√°t T√¢y Ban Nha', 'g·∫°ch ·ªëp l√°t cao c·∫•p'],
                    maxRequests: 3,
                    language: 'vi'
                }
            },
            { headers: { 'Authorization': `Bearer ${token}` } }
        );

        console.log('‚úÖ Campaign ƒë√£ ƒë∆∞·ª£c kh·ªüi ch·∫°y');
        console.log(`üìä Run ID: ${runResponse.data.data.runId}`);

        // B∆∞·ªõc 3: ƒê·ª£i v√† ki·ªÉm tra status
        console.log('\n‚è≥ B∆∞·ªõc 3: ƒê·ª£i campaign ho√†n th√†nh...');
        let attempts = 0;
        const maxAttempts = 10;

        while (attempts < maxAttempts) {
            await new Promise(resolve => setTimeout(resolve, 2000)); // ƒê·ª£i 2 gi√¢y

            try {
                const statusResponse = await axios.get(
                    `http://localhost:5000/api/campaigns/${campaign._id}/status`,
                    { headers: { 'Authorization': `Bearer ${token}` } }
                );

                const status = statusResponse.data.data;
                console.log(`üìä Status: ${status.status} (L·∫ßn th·ª≠ ${attempts + 1}/${maxAttempts})`);

                if (status.status === 'completed' || status.status === 'failed') {
                    console.log('\nüéØ Campaign ƒë√£ ho√†n th√†nh!');
                    console.log('üìä K·∫øt qu·∫£ chi ti·∫øt:');
                    console.log(`   - Status: ${status.status}`);
                    console.log(`   - Records processed: ${status.result?.recordsProcessed || 0}`);
                    console.log(`   - Duration: ${status.result?.duration || 0}ms`);

                    if (status.result?.log) {
                        console.log('\nüìù Log cu·ªëi c√πng:');
                        console.log(status.result.log.split('\n').slice(-5).join('\n'));
                    }
                    break;
                }
            } catch (error) {
                console.log(`‚ö†Ô∏è L·ªói khi ki·ªÉm tra status: ${error.message}`);
            }

            attempts++;
        }

        // B∆∞·ªõc 4: Hi·ªÉn th·ªã data ƒë√£ c√†o t·ª´ actor results
        console.log('\nüìä B∆∞·ªõc 4: Hi·ªÉn th·ªã data ƒë√£ c√†o...');
        const resultsResponse = await axios.get(
            `http://localhost:5000/api/actors/${actorId}/results`,
            { headers: { 'Authorization': `Bearer ${token}` } }
        );

        const results = resultsResponse.data.data;
        console.log('\nüéØ TH√îNG TIN T·ªîNG QUAN:');
        console.log('========================');
        console.log(`üìã Actor: ${results.actorName}`);
        console.log(`üèÉ‚Äç‚ôÇÔ∏è Run ID: ${results.lastRunId}`);
        console.log(`üìä T·ªïng k·∫øt qu·∫£: ${results.totalResults} k·∫øt qu·∫£`);
        console.log(`üìù T·ª´ kh√≥a: "${results.statistics.searchTerm}"`);
        console.log(`‚è±Ô∏è Th·ªùi gian th·ª±c thi: ${results.statistics.executionTime}`);
        console.log(`üìà T·ª∑ l·ªá th√†nh c√¥ng: ${results.statistics.successRate}`);

        console.log('\nüìÅ Files ƒë∆∞·ª£c t·∫°o:');
        Object.values(results.files).forEach(file => {
            console.log(`   - üìÑ ${file.filename}`);
        });

        console.log('\nüîç K·∫øt qu·∫£ c√†o (10 k·∫øt qu·∫£):');
        results.files.outputSearchTerms.content.forEach((item, index) => {
            console.log(`${index + 1}. ${item.title}`);
            console.log(`   URL: ${item.url}`);
            console.log(`   Snippet: ${item.snippet}`);
            console.log('');
        });

        console.log('\nüéâ HO√ÄN TH√ÄNH! Campaign ƒë√£ ch·∫°y th√†nh c√¥ng v·ªõi simulation.');

    } catch (error) {
        console.error('‚ùå Error:', error.response?.data || error.message);
    }
}

runCampaignSimulation();
