const path = require('path');
const fs = require('fs').promises;
const { spawn } = require('child_process');

async function testActorSetup() {
    try {
        console.log('üß™ Testing actor setup...');

        // Test 1: Ki·ªÉm tra actor path
        const actorId = '689464ac10595b979c15002a';
        const userId = '6891a5c601229ef8877f74f1';
        const actorPath = path.join(process.cwd(), 'actors_storage', userId, actorId);

        console.log(`üìÅ Actor path: ${actorPath}`);

        try {
            await fs.access(actorPath);
            console.log('‚úÖ Actor directory exists');
        } catch (error) {
            console.log(`‚ùå Actor directory not found: ${error.message}`);
            return;
        }

        // Test 2: Ki·ªÉm tra th∆∞ m·ª•c src
        const srcPath = path.join(actorPath, 'src');
        console.log(`üìÅ Src path: ${srcPath}`);

        try {
            await fs.access(srcPath);
            console.log('‚úÖ Src directory exists');
        } catch (error) {
            console.log(`‚ùå Src directory not found: ${error.message}`);
            return;
        }

        // Test 3: Ki·ªÉm tra file main.js
        const mainJsPath = path.join(srcPath, 'main.js');
        console.log(`üìÑ Main.js path: ${mainJsPath}`);

        try {
            await fs.access(mainJsPath);
            console.log('‚úÖ main.js exists');
        } catch (error) {
            console.log(`‚ùå main.js not found: ${error.message}`);
            return;
        }

        // Test 4: T·∫°o th∆∞ m·ª•c apify_storage
        console.log('üìÅ Creating apify_storage directories...');
        const apifyStoragePath = path.join(actorPath, 'apify_storage');
        const keyValueStorePath = path.join(apifyStoragePath, 'key_value_stores', 'default');
        const datasetPath = path.join(apifyStoragePath, 'datasets', 'default');

        try {
            await fs.mkdir(keyValueStorePath, { recursive: true });
            await fs.mkdir(datasetPath, { recursive: true });
            console.log('‚úÖ Apify storage directories created');
        } catch (error) {
            console.log(`‚ùå Error creating apify storage: ${error.message}`);
            return;
        }

        // Test 5: T·∫°o input file
        const testInput = {
            url: "https://b2b.daisan.vn/products/gach-op-tuong",
            pageStart: 1,
            pageEnd: 1
        };

        const inputPath = path.join(srcPath, 'input.json');
        console.log(`üìÑ Creating input file: ${inputPath}`);

        try {
            await fs.writeFile(inputPath, JSON.stringify(testInput, null, 2));
            console.log('‚úÖ Input file created');
        } catch (error) {
            console.log(`‚ùå Error creating input file: ${error.message}`);
            return;
        }

        // Test 6: Ki·ªÉm tra package.json v√† c√†i ƒë·∫∑t dependencies
        const packageJsonPath = path.join(actorPath, 'package.json');
        console.log(`üìÑ Checking package.json: ${packageJsonPath}`);

        try {
            await fs.access(packageJsonPath);
            console.log('‚úÖ package.json exists, installing dependencies...');

            await new Promise((resolve, reject) => {
                const npmPath = process.platform === 'win32' ? 'npm.cmd' : 'npm';
                const install = spawn(npmPath, ['install'], {
                    cwd: actorPath,
                    stdio: ['pipe', 'pipe', 'pipe'],
                    shell: true
                });

                install.on('close', (code) => {
                    if (code === 0) {
                        console.log('‚úÖ Dependencies installed successfully');
                        resolve();
                    } else {
                        console.log(`‚ùå Failed to install dependencies: ${code}`);
                        reject(new Error(`npm install failed with code ${code}`));
                    }
                });

                install.on('error', (error) => {
                    console.log(`‚ùå Error running npm install: ${error.message}`);
                    reject(error);
                });
            });
        } catch (error) {
            console.log('‚ö†Ô∏è No package.json found or npm install failed, continuing...');
        }

        // Test 7: Th·ª≠ spawn actor process
        console.log('üöÄ Testing actor process spawn...');

        const child = spawn('node', ['main.js'], {
            cwd: srcPath,
            stdio: ['pipe', 'pipe', 'pipe'],
            env: { ...process.env, NODE_ENV: 'production' }
        });

        console.log(`üîÑ Actor process spawned with PID: ${child.pid}`);

        // Ki·ªÉm tra process c√≥ t·ªìn t·∫°i kh√¥ng
        try {
            process.kill(child.pid, 0);
            console.log('‚úÖ Actor process is alive');
        } catch (error) {
            console.log(`‚ùå Actor process is not responding: ${error.message}`);
        }

        // ƒê·ª£i 30 gi√¢y ƒë·ªÉ xem c√≥ output g√¨ kh√¥ng
        console.log('‚è≥ Waiting 30 seconds for actor output...');

        child.stdout.on('data', (data) => {
            console.log(`üì§ Actor stdout: ${data.toString().trim()}`);
        });

        child.stderr.on('data', (data) => {
            console.log(`üì§ Actor stderr: ${data.toString().trim()}`);
        });

        child.on('close', (code) => {
            console.log(`üèÅ Actor process closed with code: ${code}`);
        });

        child.on('error', (error) => {
            console.log(`‚ùå Actor process error: ${error.message}`);
        });

        // Kill process sau 30 gi√¢y ƒë·ªÉ c√≥ th·ªùi gian c√†o d·ªØ li·ªáu
        setTimeout(() => {
            console.log('‚è∞ Killing actor process after 30 seconds...');
            try {
                child.kill();
                console.log('‚úÖ Actor process killed');
            } catch (error) {
                console.log(`‚ùå Error killing actor process: ${error.message}`);
            }
        }, 30000);

    } catch (error) {
        console.error('‚ùå Test failed:', error.message);
        console.error(error.stack);
    }
}

// Ch·∫°y test
testActorSetup();
